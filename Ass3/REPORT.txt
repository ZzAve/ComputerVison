Tudor Andronic 4121449
Julius van Dis 4038010

====================
III.2d Getting the intrinsics
In order to get our intrinsics for the different camera's we adapted our code of the first assignment. Since there were some reflection spots on a few of the frames of the videos, it was not an option to let the entire video(s) be used for the calibration.

Therefore, we adapted the code, such that we were asked at each suitable frame whether we would like to use it for the calibration or not. A suitable frame, is a frame for which the checkerboard could be found. To prevent to use images that are all too similar, a threshold was built in as well. To see whether the images were similar, the absolute difference in position of all the checkerboard corners were taken into account. If the difference was large enough, the image would pass the test. If it would pass the test when compared to all already selected frames, we were asked the question whether to use the image or not.

Unfortunately, checking all the video's and determining whether it is suitable to use for calibration is rather time consuming. To calibrate one camera, using one video took us about 15 min, of which appr. 8 minutes were for accepting/disaccepting frames.

The video's we used for the calibration can be found in the folder 'Ass1.1/data/camX/video.avi' where X is substituted with the camera number. In the folders for camera 2 and 3 the actual images used for calibrations were saved there. (the other ones not, because of editing of the code after determining the intrinsics for  cam4 and cam1).

===============
IV.5 determining HSV values

In order to determine the HSV values, we used the three sliders that were present on the video window. In order to get the best filter we systematically approached it. A number of drawbacks were:
- On camera 1 the chessboard is visible, this gives a lot of problems apparently, for reason we do not know of.
- The legs of Tudor are often considered to be noise
Due to the configuration, the setting of v has clearly the largest influence on the output. This is also because the three filters (H,S and V respectively) are are done in sequential order.

In order to do this systematically we looked at the influence of seperate components

Comparisons:
Lower bound on sliders: 10
v = 14
  s = 50   h has almost no influence 
  s = 200  Hardly any influence by h 
v = 20
  s = 80 h=40 gives reasonable result, but legs are tricky
  s = 40  legs are always shattered
  s = 20  legs are seen as noise for h>40
v= 40
  s= 10  h must be smaller than 100
   h=40  
v=65
  0<h<20
  0<s<40
v= 85  very hard to get good s and h values
 s = 0 -4
 h = 0 - 8   
v= 100  s and h values hardly add any contribution, but there is still a lot of noise.
 s = 0 -1
 h = 0 - 4

The cap of v is set to 100. Above that setting, the legs are unrecoverable with h and s. We noticed that the most promising results were in the range were v was between 40 and 80. There we started to fine tune in that regions. In order to help, we put the erosion parameter to 1 to filter out small parts that are recognised (how these are implemented is explained later)

After some trial and error in the fine-tune region, we found the following values ( 0 10 63) to be the best result. Then we started adding the dilation and erotion functions, which could help us get rid of the last noise. The result can be seen in our little youTube video.


Our ultimate goal was run an optimisation algoritm which compares one of the frames which is photoshopped with a frame on which background subtraction was performed by the program with set h, s and v values. Making a large for loop would allow all filter settings to be compared with the photoshopped image. The settings for an image that would resemble the photoshop image most would win the battle, and ultimately the h,s and v settings would be recovered. Unfortunately due to some coding problem, conversion errors and some minor planning problems, we were not able to implement this fully.



=================
Additional information
In order to improve our results we also included the dilation() and erode() functions, which could also be set using one of the sliders in the "Video" window. We have chosen to do it in threefold: first eroding, then dilating and finally eroding again. The first erode() ensures that all leftover noise from the HSV filters is removed. Dilation then makes sure that there are no holes anymore in the person (Tudor), and the second erode makes him look less fat.

